"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.highlight = exports.success = exports.trace = exports.debug = exports.data = exports.print = exports.info = exports.warning = exports.error = exports.LogLevel = void 0;
exports.setLogLevel = setLogLevel;
exports.setCI = setCI;
exports.withCorkedLogging = withCorkedLogging;
exports.log = log;
exports.prefix = prefix;
const util = require("util");
const chalk = require("chalk");
/**
 * Available log levels in order of increasing verbosity.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
    LogLevel["TRACE"] = "trace";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
const { stdout, stderr } = process;
// Corking mechanism
let CORK_COUNTER = 0;
const logBuffer = [];
// Style mappings
const styleMap = {
    [LogLevel.ERROR]: chalk.red,
    [LogLevel.WARN]: chalk.yellow,
    [LogLevel.INFO]: chalk.white,
    [LogLevel.DEBUG]: chalk.gray,
    [LogLevel.TRACE]: chalk.gray,
};
// Stream selection
let CI = false;
/**
 * Determines which output stream to use based on log level and configuration.
 * @param level - The log level to determine stream for
 * @param forceStdout - Whether to force stdout regardless of level
 * @returns The appropriate Writable stream
 */
const getStream = (level, forceStdout) => {
    // Special case - data() calls should always go to stdout
    if (forceStdout) {
        return stdout;
    }
    if (level === LogLevel.ERROR)
        return stderr;
    return CI ? stdout : stderr;
};
const levelPriority = {
    [LogLevel.ERROR]: 0,
    [LogLevel.WARN]: 1,
    [LogLevel.INFO]: 2,
    [LogLevel.DEBUG]: 3,
    [LogLevel.TRACE]: 4,
};
let currentLogLevel = LogLevel.INFO;
/**
 * Sets the current log level. Messages with a lower priority level will be filtered out.
 * @param level - The new log level to set
 */
function setLogLevel(level) {
    currentLogLevel = level;
}
/**
 * Sets whether the logger is running in CI mode.
 * In CI mode, all non-error output goes to stdout instead of stderr.
 * @param newCI - Whether CI mode should be enabled
 */
function setCI(newCI) {
    CI = newCI;
}
/**
 * Formats a date object into a timestamp string (HH:MM:SS).
 * @param d - Date object to format
 * @returns Formatted time string
 */
function formatTime(d) {
    const pad = (n) => n.toString().padStart(2, '0');
    return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
}
/**
 * Executes a block of code with corked logging. All log messages during execution
 * are buffered and only written after the block completes.
 * @param block - Async function to execute with corked logging
 * @returns Promise that resolves with the block's return value
 */
async function withCorkedLogging(block) {
    CORK_COUNTER++;
    try {
        return await block();
    }
    finally {
        CORK_COUNTER--;
        if (CORK_COUNTER === 0) {
            logBuffer.forEach(([stream, str]) => stream.write(str + '\n'));
            logBuffer.splice(0);
        }
    }
}
function log(levelOrEntry, fmt, ...args) {
    // Normalize input
    const entry = typeof levelOrEntry === 'string'
        ? { level: levelOrEntry, message: util.format(fmt, ...args) }
        : levelOrEntry;
    // Check if we should log this level
    if (levelPriority[entry.level] > levelPriority[currentLogLevel]) {
        return;
    }
    // Format the message
    let finalMessage = entry.message;
    // Add timestamp first if requested
    if (entry.timestamp) {
        finalMessage = `[${formatTime(new Date())}] ${finalMessage}`;
    }
    // Add prefix AFTER timestamp
    if (entry.prefix) {
        finalMessage = `${entry.prefix} ${finalMessage}`;
    }
    // Apply custom style if provided, otherwise use level-based style
    const style = entry.style || styleMap[entry.level];
    finalMessage = style(finalMessage);
    // Get appropriate stream - pass through forceStdout flag
    const stream = getStream(entry.level, entry.forceStdout);
    // Handle corking
    if (CORK_COUNTER > 0) {
        logBuffer.push([stream, finalMessage]);
        return;
    }
    // Write to stream
    stream.write(finalMessage + '\n');
}
// Convenience logging methods
const error = (fmt, ...args) => log(LogLevel.ERROR, fmt, ...args);
exports.error = error;
const warning = (fmt, ...args) => log(LogLevel.WARN, fmt, ...args);
exports.warning = warning;
const info = (fmt, ...args) => log(LogLevel.INFO, fmt, ...args);
exports.info = info;
const print = (fmt, ...args) => log(LogLevel.INFO, fmt, ...args);
exports.print = print;
const data = (fmt, ...args) => log({
    level: LogLevel.INFO,
    message: util.format(fmt, ...args),
    forceStdout: true,
});
exports.data = data;
const debug = (fmt, ...args) => log({
    level: LogLevel.DEBUG,
    message: util.format(fmt, ...args),
    timestamp: true,
});
exports.debug = debug;
const trace = (fmt, ...args) => log({
    level: LogLevel.TRACE,
    message: util.format(fmt, ...args),
    timestamp: true,
});
exports.trace = trace;
const success = (fmt, ...args) => log({
    level: LogLevel.INFO,
    message: util.format(fmt, ...args),
    style: chalk.green,
});
exports.success = success;
const highlight = (fmt, ...args) => log({
    level: LogLevel.INFO,
    message: util.format(fmt, ...args),
    style: chalk.bold,
});
exports.highlight = highlight;
/**
 * Creates a logging function that prepends a prefix to all messages.
 * @param prefixString - String to prepend to all messages
 * @param level - Log level to use (defaults to INFO)
 * @returns Logging function that accepts format string and arguments
 */
function prefix(prefixString, level = LogLevel.INFO) {
    return (fmt, ...args) => log({
        level,
        message: util.format(fmt, ...args),
        prefix: prefixString,
    });
}
//# sourceMappingURL=data:application/json;base64,