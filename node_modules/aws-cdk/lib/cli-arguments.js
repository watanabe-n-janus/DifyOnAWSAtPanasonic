"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"cli-arguments.js","sourceRoot":"","sources":["cli-arguments.ts"],"names":[],"mappings":"","sourcesContent":["// -------------------------------------------------------------------------------------------\n// GENERATED FROM packages/aws-cdk/lib/config.ts.\n// Do not edit by hand; all changes will be overwritten at build time from the config file.\n// -------------------------------------------------------------------------------------------\n/* eslint-disable @stylistic/max-len */\nimport { Command } from './settings';\n\n/**\n * The structure of the CLI configuration, generated from packages/aws-cdk/lib/config.ts\n *\n * @struct\n */\nexport interface CliArguments {\n  /**\n   * The CLI command name followed by any properties of the command\n   */\n  readonly _: [Command, ...string[]];\n\n  /**\n   * Global options available to all CLI commands\n   */\n  readonly globalOptions?: GlobalOptions;\n\n  /**\n   * Lists all stacks in the app\n   *\n   * aliases: ls\n   */\n  readonly list?: ListOptions;\n\n  /**\n   * Synthesizes and prints the CloudFormation template for this stack\n   *\n   * aliases: synth\n   */\n  readonly synthesize?: SynthesizeOptions;\n\n  /**\n   * Deploys the CDK toolkit stack into an AWS environment\n   */\n  readonly bootstrap?: BootstrapOptions;\n\n  /**\n   * Garbage collect assets. Options detailed here: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk/README.md#cdk-gc\n   */\n  readonly gc?: GcOptions;\n\n  /**\n   * Deploys the stack(s) named STACKS into your AWS account\n   */\n  readonly deploy?: DeployOptions;\n\n  /**\n   * Rolls back the stack(s) named STACKS to their last stable state\n   */\n  readonly rollback?: RollbackOptions;\n\n  /**\n   * Import existing resource(s) into the given STACK\n   */\n  readonly import?: ImportOptions;\n\n  /**\n   * Shortcut for 'deploy --watch'\n   */\n  readonly watch?: WatchOptions;\n\n  /**\n   * Destroy the stack(s) named STACKS\n   */\n  readonly destroy?: DestroyOptions;\n\n  /**\n   * Compares the specified stack with the deployed stack or a local template file, and returns with status 1 if any difference is found\n   */\n  readonly diff?: DiffOptions;\n\n  /**\n   * Returns all metadata associated with this stack\n   */\n  readonly metadata?: MetadataOptions;\n\n  /**\n   * Acknowledge a notice so that it does not show up anymore\n   *\n   * aliases: ack\n   */\n  readonly acknowledge?: AcknowledgeOptions;\n\n  /**\n   * Returns a list of relevant notices\n   */\n  readonly notices?: NoticesOptions;\n\n  /**\n   * Create a new, empty CDK project from a template.\n   */\n  readonly init?: InitOptions;\n\n  /**\n   * Migrate existing AWS resources into a CDK app\n   */\n  readonly migrate?: MigrateOptions;\n\n  /**\n   * Manage cached context values\n   */\n  readonly context?: ContextOptions;\n\n  /**\n   * Opens the reference documentation in a browser\n   *\n   * aliases: doc\n   */\n  readonly docs?: DocsOptions;\n\n  /**\n   * Check your set-up for potential problems\n   */\n  readonly doctor?: DoctorOptions;\n}\n\n/**\n * Global options available to all CLI commands\n *\n * @struct\n */\nexport interface GlobalOptions {\n  /**\n   * REQUIRED WHEN RUNNING APP: command-line for executing your app or a cloud assembly directory (e.g. \"node bin/my-app.js\"). Can also be specified in cdk.json or ~/.cdk.json\n   *\n   * @default - undefined\n   */\n  readonly app?: string;\n\n  /**\n   * Command-line for a pre-synth build\n   *\n   * @default - undefined\n   */\n  readonly build?: string;\n\n  /**\n   * Add contextual string parameter (KEY=VALUE)\n   *\n   * @default - []\n   */\n  readonly context?: Array<string>;\n\n  /**\n   * Name or path of a node package that extend the CDK features. Can be specified multiple times\n   *\n   * @default - []\n   */\n  readonly plugin?: Array<string>;\n\n  /**\n   * Print trace for stack warnings\n   *\n   * @default - undefined\n   */\n  readonly trace?: boolean;\n\n  /**\n   * Do not construct stacks with warnings\n   *\n   * @default - undefined\n   */\n  readonly strict?: boolean;\n\n  /**\n   * Perform context lookups (synthesis fails if this is disabled and context lookups need to be performed)\n   *\n   * @default - true\n   */\n  readonly lookups?: boolean;\n\n  /**\n   * Ignores synthesis errors, which will likely produce an invalid output\n   *\n   * @default - false\n   */\n  readonly ignoreErrors?: boolean;\n\n  /**\n   * Use JSON output instead of YAML when templates are printed to STDOUT\n   *\n   * @default - false\n   */\n  readonly json?: boolean;\n\n  /**\n   * Show debug logs (specify multiple times to increase verbosity)\n   *\n   * @default - false\n   */\n  readonly verbose?: boolean;\n\n  /**\n   * Debug the CDK app. Log additional information during synthesis, such as creation stack traces of tokens (sets CDK_DEBUG, will slow down synthesis)\n   *\n   * @default - false\n   */\n  readonly debug?: boolean;\n\n  /**\n   * Use the indicated AWS profile as the default environment\n   *\n   * @default - undefined\n   */\n  readonly profile?: string;\n\n  /**\n   * Use the indicated proxy. Will read from HTTPS_PROXY environment variable if not specified\n   *\n   * @default - undefined\n   */\n  readonly proxy?: string;\n\n  /**\n   * Path to CA certificate to use when validating HTTPS requests. Will read from AWS_CA_BUNDLE environment variable if not specified\n   *\n   * @default - undefined\n   */\n  readonly caBundlePath?: string;\n\n  /**\n   * Force trying to fetch EC2 instance credentials. Default: guess EC2 instance status\n   *\n   * @default - undefined\n   */\n  readonly ec2creds?: boolean;\n\n  /**\n   * Include the \"AWS::CDK::Metadata\" resource in synthesized templates (enabled by default)\n   *\n   * @default - undefined\n   */\n  readonly versionReporting?: boolean;\n\n  /**\n   * Include \"aws:cdk:path\" CloudFormation metadata for each resource (enabled by default)\n   *\n   * @default - undefined\n   */\n  readonly pathMetadata?: boolean;\n\n  /**\n   * Include \"aws:asset:*\" CloudFormation metadata for resources that uses assets (enabled by default)\n   *\n   * @default - undefined\n   */\n  readonly assetMetadata?: boolean;\n\n  /**\n   * ARN of Role to use when invoking CloudFormation\n   *\n   * @default - undefined\n   */\n  readonly roleArn?: string;\n\n  /**\n   * Copy assets to the output directory (use --no-staging to disable the copy of assets which allows local debugging via the SAM CLI to reference the original source files)\n   *\n   * @default - true\n   */\n  readonly staging?: boolean;\n\n  /**\n   * Emits the synthesized cloud assembly into a directory (default: cdk.out)\n   *\n   * @default - undefined\n   */\n  readonly output?: string;\n\n  /**\n   * Show relevant notices\n   *\n   * @default - undefined\n   */\n  readonly notices?: boolean;\n\n  /**\n   * Removes colors and other style from console output\n   *\n   * @default - false\n   */\n  readonly noColor?: boolean;\n\n  /**\n   * Force CI detection. If CI=true then logs will be sent to stdout instead of stderr\n   *\n   * @default - undefined\n   */\n  readonly ci?: boolean;\n\n  /**\n   * Opt in to unstable features. The flag indicates that the scope and API of a feature might still change. Otherwise the feature is generally production ready and fully supported. Can be specified multiple times.\n   *\n   * @default - []\n   */\n  readonly unstable?: Array<string>;\n}\n\n/**\n * Lists all stacks in the app\n *\n * aliases: ls\n *\n * @struct\n */\nexport interface ListOptions {\n  /**\n   * Display environment information for each stack\n   *\n   * aliases: l\n   *\n   * @default - false\n   */\n  readonly long?: boolean;\n\n  /**\n   * Display stack dependency information for each stack\n   *\n   * aliases: d\n   *\n   * @default - false\n   */\n  readonly showDependencies?: boolean;\n}\n\n/**\n * Synthesizes and prints the CloudFormation template for this stack\n *\n * aliases: synth\n *\n * @struct\n */\nexport interface SynthesizeOptions {\n  /**\n   * Only synthesize requested stacks, don't include dependencies\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly exclusively?: boolean;\n\n  /**\n   * After synthesis, validate stacks with the \"validateOnSynth\" attribute set (can also be controlled with CDK_VALIDATION)\n   *\n   * @default - true\n   */\n  readonly validation?: boolean;\n\n  /**\n   * Do not output CloudFormation Template to stdout\n   *\n   * aliases: q\n   *\n   * @default - false\n   */\n  readonly quiet?: boolean;\n}\n\n/**\n * Deploys the CDK toolkit stack into an AWS environment\n *\n * @struct\n */\nexport interface BootstrapOptions {\n  /**\n   * The name of the CDK toolkit bucket; bucket will be created and must not exist\n   *\n   * aliases: b toolkit-bucket-name\n   *\n   * @default - undefined\n   */\n  readonly bootstrapBucketName?: string;\n\n  /**\n   * AWS KMS master key ID used for the SSE-KMS encryption\n   *\n   * @default - undefined\n   */\n  readonly bootstrapKmsKeyId?: string;\n\n  /**\n   * Use the example permissions boundary.\n   *\n   * aliases: epb\n   *\n   * @default - undefined\n   */\n  readonly examplePermissionsBoundary?: boolean;\n\n  /**\n   * Use the permissions boundary specified by name.\n   *\n   * aliases: cpb\n   *\n   * @default - undefined\n   */\n  readonly customPermissionsBoundary?: string;\n\n  /**\n   * Create a Customer Master Key (CMK) for the bootstrap bucket (you will be charged but can customize permissions, modern bootstrapping only)\n   *\n   * @default - undefined\n   */\n  readonly bootstrapCustomerKey?: boolean;\n\n  /**\n   * String which must be unique for each bootstrap stack. You must configure it on your CDK app if you change this from the default.\n   *\n   * @default - undefined\n   */\n  readonly qualifier?: string;\n\n  /**\n   * Block public access configuration on CDK toolkit bucket (enabled by default)\n   *\n   * @default - undefined\n   */\n  readonly publicAccessBlockConfiguration?: boolean;\n\n  /**\n   * Tags to add for the stack (KEY=VALUE)\n   *\n   * aliases: t\n   *\n   * @default - []\n   */\n  readonly tags?: Array<string>;\n\n  /**\n   * Whether to execute ChangeSet (--no-execute will NOT execute the ChangeSet)\n   *\n   * @default - true\n   */\n  readonly execute?: boolean;\n\n  /**\n   * The AWS account IDs that should be trusted to perform deployments into this environment (may be repeated, modern bootstrapping only)\n   *\n   * @default - []\n   */\n  readonly trust?: Array<string>;\n\n  /**\n   * The AWS account IDs that should be trusted to look up values in this environment (may be repeated, modern bootstrapping only)\n   *\n   * @default - []\n   */\n  readonly trustForLookup?: Array<string>;\n\n  /**\n   * The Managed Policy ARNs that should be attached to the role performing deployments into this environment (may be repeated, modern bootstrapping only)\n   *\n   * @default - []\n   */\n  readonly cloudformationExecutionPolicies?: Array<string>;\n\n  /**\n   * Always bootstrap even if it would downgrade template version\n   *\n   * aliases: f\n   *\n   * @default - false\n   */\n  readonly force?: boolean;\n\n  /**\n   * Toggle CloudFormation termination protection on the bootstrap stacks\n   *\n   * @default - undefined\n   */\n  readonly terminationProtection?: boolean;\n\n  /**\n   * Instead of actual bootstrapping, print the current CLI's bootstrapping template to stdout for customization\n   *\n   * @default - false\n   */\n  readonly showTemplate?: boolean;\n\n  /**\n   * The name of the CDK toolkit stack to create\n   *\n   * @default - undefined\n   */\n  readonly toolkitStackName?: string;\n\n  /**\n   * Use the template from the given file instead of the built-in one (use --show-template to obtain an example)\n   *\n   * @default - undefined\n   */\n  readonly template?: string;\n\n  /**\n   * Use previous values for existing parameters (you must specify all parameters on every deployment if this is disabled)\n   *\n   * @default - true\n   */\n  readonly previousParameters?: boolean;\n}\n\n/**\n * Garbage collect assets. Options detailed here: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk/README.md#cdk-gc\n *\n * @struct\n */\nexport interface GcOptions {\n  /**\n   * The action (or sub-action) you want to perform. Valid entires are \"print\", \"tag\", \"delete-tagged\", \"full\".\n   *\n   * @default - \"full\"\n   */\n  readonly action?: string;\n\n  /**\n   * Specify either ecr, s3, or all\n   *\n   * @default - \"all\"\n   */\n  readonly type?: string;\n\n  /**\n   * Delete assets that have been marked as isolated for this many days\n   *\n   * @default - 0\n   */\n  readonly rollbackBufferDays?: number;\n\n  /**\n   * Never delete assets younger than this (in days)\n   *\n   * @default - 1\n   */\n  readonly createdBufferDays?: number;\n\n  /**\n   * Confirm via manual prompt before deletion\n   *\n   * @default - true\n   */\n  readonly confirm?: boolean;\n\n  /**\n   * The name of the CDK toolkit stack, if different from the default \"CDKToolkit\"\n   *\n   * @default - undefined\n   */\n  readonly bootstrapStackName?: string;\n}\n\n/**\n * Deploys the stack(s) named STACKS into your AWS account\n *\n * @struct\n */\nexport interface DeployOptions {\n  /**\n   * Deploy all available stacks\n   *\n   * @default - false\n   */\n  readonly all?: boolean;\n\n  /**\n   * Do not rebuild asset with the given ID. Can be specified multiple times\n   *\n   * aliases: E\n   *\n   * @default - []\n   */\n  readonly buildExclude?: Array<string>;\n\n  /**\n   * Only deploy requested stacks, don't include dependencies\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly exclusively?: boolean;\n\n  /**\n   * What security-sensitive changes need manual approval\n   *\n   * @default - undefined\n   */\n  readonly requireApproval?: string;\n\n  /**\n   * ARNs of SNS topics that CloudFormation will notify with stack related events. These will be added to ARNs specified with the 'notificationArns' stack property.\n   *\n   * @default - undefined\n   */\n  readonly notificationArns?: Array<string>;\n\n  /**\n   * Tags to add to the stack (KEY=VALUE), overrides tags from Cloud Assembly (deprecated)\n   *\n   * aliases: t\n   *\n   * @default - []\n   */\n  readonly tags?: Array<string>;\n\n  /**\n   * Whether to execute ChangeSet (--no-execute will NOT execute the ChangeSet) (deprecated)\n   *\n   * @deprecated true\n   * @default - undefined\n   */\n  readonly execute?: boolean;\n\n  /**\n   * Name of the CloudFormation change set to create (only if method is not direct)\n   *\n   * @default - undefined\n   */\n  readonly changeSetName?: string;\n\n  /**\n   * How to perform the deployment. Direct is a bit faster but lacks progress information\n   *\n   * aliases: m\n   *\n   * @default - undefined\n   */\n  readonly method?: string;\n\n  /**\n   * Indicates if the stack set imports resources that already exist.\n   *\n   * @default - false\n   */\n  readonly importExistingResources?: boolean;\n\n  /**\n   * Always deploy stack even if templates are identical\n   *\n   * aliases: f\n   *\n   * @default - false\n   */\n  readonly force?: boolean;\n\n  /**\n   * Additional parameters passed to CloudFormation at deploy time (STACK:KEY=VALUE)\n   *\n   * @default - {}\n   */\n  readonly parameters?: Array<string>;\n\n  /**\n   * Path to file where stack outputs will be written as JSON\n   *\n   * aliases: O\n   *\n   * @default - undefined\n   */\n  readonly outputsFile?: string;\n\n  /**\n   * Use previous values for existing parameters (you must specify all parameters on every deployment if this is disabled)\n   *\n   * @default - true\n   */\n  readonly previousParameters?: boolean;\n\n  /**\n   * The name of the existing CDK toolkit stack (only used for app using legacy synthesis)\n   *\n   * @default - undefined\n   */\n  readonly toolkitStackName?: string;\n\n  /**\n   * Display mode for stack activity events\n   *\n   * @default - undefined\n   */\n  readonly progress?: string;\n\n  /**\n   * Rollback stack to stable state on failure. Defaults to 'true', iterate more rapidly with --no-rollback or -R. Note: do **not** disable this flag for deployments with resource replacements, as that will always fail\n   *\n   * @default - undefined\n   */\n  readonly rollback?: boolean;\n\n  /**\n   * Attempts to perform a 'hotswap' deployment, but does not fall back to a full deployment if that is not possible. Instead, changes to any non-hotswappable properties are ignored.Do not use this in production environments\n   *\n   * @default - undefined\n   */\n  readonly hotswap?: boolean;\n\n  /**\n   * Attempts to perform a 'hotswap' deployment, which skips CloudFormation and updates the resources directly, and falls back to a full deployment if that is not possible. Do not use this in production environments\n   *\n   * @default - undefined\n   */\n  readonly hotswapFallback?: boolean;\n\n  /**\n   * Continuously observe the project files, and deploy the given stack(s) automatically when changes are detected. Implies --hotswap by default\n   *\n   * @default - undefined\n   */\n  readonly watch?: boolean;\n\n  /**\n   * Show CloudWatch log events from all resources in the selected Stacks in the terminal. 'true' by default, use --no-logs to turn off. Only in effect if specified alongside the '--watch' option\n   *\n   * @default - true\n   */\n  readonly logs?: boolean;\n\n  /**\n   * Maximum number of simultaneous deployments (dependency permitting) to execute.\n   *\n   * @default - 1\n   */\n  readonly concurrency?: number;\n\n  /**\n   * Whether to build/publish assets in parallel\n   *\n   * @default - undefined\n   */\n  readonly assetParallelism?: boolean;\n\n  /**\n   * Whether to build all assets before deploying the first stack (useful for failing Docker builds)\n   *\n   * @default - true\n   */\n  readonly assetPrebuild?: boolean;\n\n  /**\n   * Whether to deploy if the app contains no stacks\n   *\n   * @default - false\n   */\n  readonly ignoreNoStacks?: boolean;\n}\n\n/**\n * Rolls back the stack(s) named STACKS to their last stable state\n *\n * @struct\n */\nexport interface RollbackOptions {\n  /**\n   * Roll back all available stacks\n   *\n   * @default - false\n   */\n  readonly all?: boolean;\n\n  /**\n   * The name of the CDK toolkit stack the environment is bootstrapped with\n   *\n   * @default - undefined\n   */\n  readonly toolkitStackName?: string;\n\n  /**\n   * Orphan all resources for which the rollback operation fails.\n   *\n   * aliases: f\n   *\n   * @default - undefined\n   */\n  readonly force?: boolean;\n\n  /**\n   * Whether to validate the bootstrap stack version. Defaults to 'true', disable with --no-validate-bootstrap-version.\n   *\n   * @default - undefined\n   */\n  readonly validateBootstrapVersion?: boolean;\n\n  /**\n   * Orphan the given resources, identified by their logical ID (can be specified multiple times)\n   *\n   * @default - []\n   */\n  readonly orphan?: Array<string>;\n}\n\n/**\n * Import existing resource(s) into the given STACK\n *\n * @struct\n */\nexport interface ImportOptions {\n  /**\n   * Whether to execute ChangeSet (--no-execute will NOT execute the ChangeSet)\n   *\n   * @default - true\n   */\n  readonly execute?: boolean;\n\n  /**\n   * Name of the CloudFormation change set to create\n   *\n   * @default - undefined\n   */\n  readonly changeSetName?: string;\n\n  /**\n   * The name of the CDK toolkit stack to create\n   *\n   * @default - undefined\n   */\n  readonly toolkitStackName?: string;\n\n  /**\n   * Rollback stack to stable state on failure. Defaults to 'true', iterate more rapidly with --no-rollback or -R. Note: do **not** disable this flag for deployments with resource replacements, as that will always fail\n   *\n   * @default - undefined\n   */\n  readonly rollback?: boolean;\n\n  /**\n   * Do not abort if the template diff includes updates or deletes. This is probably safe but we're not sure, let us know how it goes.\n   *\n   * aliases: f\n   *\n   * @default - undefined\n   */\n  readonly force?: boolean;\n\n  /**\n   * If specified, CDK will generate a mapping of existing physical resources to CDK resources to be imported as. The mapping will be written in the given file path. No actual import operation will be performed\n   *\n   * aliases: r\n   *\n   * @default - undefined\n   */\n  readonly recordResourceMapping?: string;\n\n  /**\n   * If specified, CDK will use the given file to map physical resources to CDK resources for import, instead of interactively asking the user. Can be run from scripts\n   *\n   * aliases: m\n   *\n   * @default - undefined\n   */\n  readonly resourceMapping?: string;\n}\n\n/**\n * Shortcut for 'deploy --watch'\n *\n * @struct\n */\nexport interface WatchOptions {\n  /**\n   * Do not rebuild asset with the given ID. Can be specified multiple times\n   *\n   * aliases: E\n   *\n   * @default - []\n   */\n  readonly buildExclude?: Array<string>;\n\n  /**\n   * Only deploy requested stacks, don't include dependencies\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly exclusively?: boolean;\n\n  /**\n   * Name of the CloudFormation change set to create\n   *\n   * @default - undefined\n   */\n  readonly changeSetName?: string;\n\n  /**\n   * Always deploy stack even if templates are identical\n   *\n   * aliases: f\n   *\n   * @default - false\n   */\n  readonly force?: boolean;\n\n  /**\n   * The name of the existing CDK toolkit stack (only used for app using legacy synthesis)\n   *\n   * @default - undefined\n   */\n  readonly toolkitStackName?: string;\n\n  /**\n   * Display mode for stack activity events\n   *\n   * @default - undefined\n   */\n  readonly progress?: string;\n\n  /**\n   * Rollback stack to stable state on failure. Defaults to 'true', iterate more rapidly with --no-rollback or -R. Note: do **not** disable this flag for deployments with resource replacements, as that will always fail\n   *\n   * @default - undefined\n   */\n  readonly rollback?: boolean;\n\n  /**\n   * Attempts to perform a 'hotswap' deployment, but does not fall back to a full deployment if that is not possible. Instead, changes to any non-hotswappable properties are ignored.'true' by default, use --no-hotswap to turn off\n   *\n   * @default - undefined\n   */\n  readonly hotswap?: boolean;\n\n  /**\n   * Attempts to perform a 'hotswap' deployment, which skips CloudFormation and updates the resources directly, and falls back to a full deployment if that is not possible.\n   *\n   * @default - undefined\n   */\n  readonly hotswapFallback?: boolean;\n\n  /**\n   * Show CloudWatch log events from all resources in the selected Stacks in the terminal. 'true' by default, use --no-logs to turn off\n   *\n   * @default - true\n   */\n  readonly logs?: boolean;\n\n  /**\n   * Maximum number of simultaneous deployments (dependency permitting) to execute.\n   *\n   * @default - 1\n   */\n  readonly concurrency?: number;\n}\n\n/**\n * Destroy the stack(s) named STACKS\n *\n * @struct\n */\nexport interface DestroyOptions {\n  /**\n   * Destroy all available stacks\n   *\n   * @default - false\n   */\n  readonly all?: boolean;\n\n  /**\n   * Only destroy requested stacks, don't include dependees\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly exclusively?: boolean;\n\n  /**\n   * Do not ask for confirmation before destroying the stacks\n   *\n   * aliases: f\n   *\n   * @default - undefined\n   */\n  readonly force?: boolean;\n}\n\n/**\n * Compares the specified stack with the deployed stack or a local template file, and returns with status 1 if any difference is found\n *\n * @struct\n */\nexport interface DiffOptions {\n  /**\n   * Only diff requested stacks, don't include dependencies\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly exclusively?: boolean;\n\n  /**\n   * Number of context lines to include in arbitrary JSON diff rendering\n   *\n   * @default - 3\n   */\n  readonly contextLines?: number;\n\n  /**\n   * The path to the CloudFormation template to compare with\n   *\n   * @default - undefined\n   */\n  readonly template?: string;\n\n  /**\n   * Do not filter out AWS::CDK::Metadata resources, mangled non-ASCII characters, or the CheckBootstrapVersionRule\n   *\n   * @default - false\n   */\n  readonly strict?: boolean;\n\n  /**\n   * Only diff for broadened security changes\n   *\n   * @default - false\n   */\n  readonly securityOnly?: boolean;\n\n  /**\n   * Fail with exit code 1 in case of diff\n   *\n   * @default - undefined\n   */\n  readonly fail?: boolean;\n\n  /**\n   * Whether to compare against the template with Transforms already processed\n   *\n   * @default - false\n   */\n  readonly processed?: boolean;\n\n  /**\n   * Do not print stack name and default message when there is no diff to stdout\n   *\n   * aliases: q\n   *\n   * @default - false\n   */\n  readonly quiet?: boolean;\n\n  /**\n   * Whether to create a changeset to analyze resource replacements. In this mode, diff will use the deploy role instead of the lookup role.\n   *\n   * aliases: changeset\n   *\n   * @default - true\n   */\n  readonly changeSet?: boolean;\n}\n\n/**\n * Returns all metadata associated with this stack\n *\n * @struct\n */\nexport interface MetadataOptions {}\n\n/**\n * Acknowledge a notice so that it does not show up anymore\n *\n * aliases: ack\n *\n * @struct\n */\nexport interface AcknowledgeOptions {}\n\n/**\n * Returns a list of relevant notices\n *\n * @struct\n */\nexport interface NoticesOptions {\n  /**\n   * Returns a list of unacknowledged notices\n   *\n   * aliases: u\n   *\n   * @default - false\n   */\n  readonly unacknowledged?: boolean;\n}\n\n/**\n * Create a new, empty CDK project from a template.\n *\n * @struct\n */\nexport interface InitOptions {\n  /**\n   * The language to be used for the new project (default can be configured in ~/.cdk.json)\n   *\n   * aliases: l\n   *\n   * @default - undefined\n   */\n  readonly language?: string;\n\n  /**\n   * List the available templates\n   *\n   * @default - undefined\n   */\n  readonly list?: boolean;\n\n  /**\n   * If true, only generates project files, without executing additional operations such as setting up a git repo, installing dependencies or compiling the project\n   *\n   * @default - false\n   */\n  readonly generateOnly?: boolean;\n}\n\n/**\n * Migrate existing AWS resources into a CDK app\n *\n * @struct\n */\nexport interface MigrateOptions {\n  /**\n   * The name assigned to the stack created in the new project. The name of the app will be based off this name as well.\n   *\n   * aliases: n\n   *\n   * @default - undefined\n   */\n  readonly stackName?: string;\n\n  /**\n   * The language to be used for the new project\n   *\n   * aliases: l\n   *\n   * @default - \"typescript\"\n   */\n  readonly language?: string;\n\n  /**\n   * The account to retrieve the CloudFormation stack template from\n   *\n   * @default - undefined\n   */\n  readonly account?: string;\n\n  /**\n   * The region to retrieve the CloudFormation stack template from\n   *\n   * @default - undefined\n   */\n  readonly region?: string;\n\n  /**\n   * The path to the CloudFormation template to migrate. Use this for locally stored templates\n   *\n   * @default - undefined\n   */\n  readonly fromPath?: string;\n\n  /**\n   * Use this flag to retrieve the template for an existing CloudFormation stack\n   *\n   * @default - undefined\n   */\n  readonly fromStack?: boolean;\n\n  /**\n   * The output path for the migrated CDK app\n   *\n   * @default - undefined\n   */\n  readonly outputPath?: string;\n\n  /**\n   * Determines if a new scan should be created, or the last successful existing scan should be used\n   *  options are \"new\" or \"most-recent\"\n   *\n   * @default - undefined\n   */\n  readonly fromScan?: string;\n\n  /**\n   * Filters the resource scan based on the provided criteria in the following format: \"key1=value1,key2=value2\"\n   *  This field can be passed multiple times for OR style filtering:\n   *  filtering options:\n   *  resource-identifier: A key-value pair that identifies the target resource. i.e. {\"ClusterName\", \"myCluster\"}\n   *  resource-type-prefix: A string that represents a type-name prefix. i.e. \"AWS::DynamoDB::\"\n   *  tag-key: a string that matches resources with at least one tag with the provided key. i.e. \"myTagKey\"\n   *  tag-value: a string that matches resources with at least one tag with the provided value. i.e. \"myTagValue\"\n   *\n   * @default - []\n   */\n  readonly filter?: Array<string>;\n\n  /**\n   * Use this flag to zip the generated CDK app\n   *\n   * @default - undefined\n   */\n  readonly compress?: boolean;\n}\n\n/**\n * Manage cached context values\n *\n * @struct\n */\nexport interface ContextOptions {\n  /**\n   * The context key (or its index) to reset\n   *\n   * aliases: e\n   *\n   * @default - undefined\n   */\n  readonly reset?: string;\n\n  /**\n   * Ignore missing key error\n   *\n   * aliases: f\n   *\n   * @default - false\n   */\n  readonly force?: boolean;\n\n  /**\n   * Clear all context\n   *\n   * @default - false\n   */\n  readonly clear?: boolean;\n}\n\n/**\n * Opens the reference documentation in a browser\n *\n * aliases: doc\n *\n * @struct\n */\nexport interface DocsOptions {\n  /**\n   * the command to use to open the browser, using %u as a placeholder for the path of the file to open\n   *\n   * aliases: b\n   *\n   * @default - undefined\n   */\n  readonly browser?: string;\n}\n\n/**\n * Check your set-up for potential problems\n *\n * @struct\n */\nexport interface DoctorOptions {}\n"]}