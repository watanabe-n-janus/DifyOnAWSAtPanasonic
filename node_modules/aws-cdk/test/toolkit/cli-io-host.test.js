"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_io_host_1 = require("../../lib/toolkit/cli-io-host");
describe('CliIoHost', () => {
    let mockStdout;
    let mockStderr;
    beforeEach(() => {
        mockStdout = jest.fn();
        mockStderr = jest.fn();
        // Mock the write methods of STD out and STD err
        jest.spyOn(process.stdout, 'write').mockImplementation((str, encoding, cb) => {
            mockStdout(str.toString());
            // Handle callback
            const callback = typeof encoding === 'function' ? encoding : cb;
            if (callback)
                callback();
            return true;
        });
        jest.spyOn(process.stderr, 'write').mockImplementation((str, encoding, cb) => {
            mockStderr(str.toString());
            // Handle callback
            const callback = typeof encoding === 'function' ? encoding : cb;
            if (callback)
                callback();
            return true;
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('stream selection', () => {
        test('writes to stderr by default for non-error messages in non-CI mode', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'test message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.white('test message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('writes to stderr for error level with red color', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'error',
                action: 'synth',
                code: 'TEST',
                message: 'error message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.red('error message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('writes to stdout when forceStdout is true', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'forced message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('forced message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
    });
    describe('TTY formatting', () => {
        test('accepts inlined chalk styles', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: chalk.green('[green prefix message]') + ' regular info level text',
                forceStdout: true,
            });
            const expected_text = cli_io_host_1.styleMap.info(chalk.green('[green prefix message]') + ' regular info level text');
            expect(mockStdout).toHaveBeenCalledWith(expected_text + '\n');
        });
        test('applies custom style in TTY mode', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const customStyle = (str) => `\x1b[35m${str}\x1b[0m`; // Custom purple color
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: customStyle('styled message'),
                forceStdout: true,
            });
            const expected_text = cli_io_host_1.styleMap.info(customStyle('styled message'));
            expect(mockStdout).toHaveBeenCalledWith(expected_text + '\n');
        });
        test('applies default style by message level in TTY mode', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'warn',
                action: 'synth',
                code: 'TEST',
                message: 'warning message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.yellow('warning message') + '\n');
        });
        test('does not apply styles in non-TTY mode', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: false });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'unstyled message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith('unstyled message\n');
        });
    });
    describe('timestamp handling', () => {
        test('includes timestamp for DEBUG level with gray color', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const testDate = new Date('2024-01-01T12:34:56');
            await host.notify({
                time: testDate,
                level: 'debug',
                action: 'synth',
                code: 'TEST',
                message: 'debug message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(`[12:34:56] ${chalk.gray('debug message')}\n`);
        });
        test('includes timestamp for TRACE level with gray color', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const testDate = new Date('2024-01-01T12:34:56');
            await host.notify({
                time: testDate,
                level: 'trace',
                action: 'synth',
                code: 'TEST',
                message: 'trace message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(`[12:34:56] ${chalk.gray('trace message')}\n`);
        });
        test('excludes timestamp for other levels but includes color', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const testDate = new Date('2024-01-01T12:34:56');
            await host.notify({
                time: testDate,
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'info message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('info message') + '\n');
        });
    });
    describe('CI mode behavior', () => {
        test('writes to stdout in CI mode when level is not error', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true, ci: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'ci message',
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('ci message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
        test('writes to stdout in CI mode with forceStdout', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true, ci: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'ci message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('ci message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
        test('writes to stderr for error level in CI mode', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true, ci: true });
            await host.notify({
                time: new Date(),
                level: 'error',
                action: 'synth',
                code: 'TEST',
                message: 'ci error message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.red('ci error message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('writes to stdout for error level in CI mode with forceStdOut', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true, ci: true });
            await host.notify({
                time: new Date(),
                level: 'error',
                action: 'synth',
                code: 'TEST',
                message: 'ci error message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.red('ci error message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
    });
    describe('special characters handling', () => {
        test('handles messages with ANSI escape sequences', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: '\u001b[31mred text\u001b[0m',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('\u001b[31mred text\u001b[0m') + '\n');
        });
        test('handles messages with newlines', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'line1\nline2\nline3',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('line1\nline2\nline3') + '\n');
        });
        test('handles empty messages', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: '',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('') + '\n');
        });
    });
    describe('action and code behavior', () => {
        test('handles all possible actions', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const actions = ['synth', 'list', 'deploy', 'destroy'];
            for (const action of actions) {
                await host.notify({
                    time: new Date(),
                    level: 'info',
                    action,
                    code: 'TEST',
                    message: `${action} message`,
                    forceStdout: true,
                });
                expect(mockStdout).toHaveBeenCalledWith(chalk.white(`${action} message`) + '\n');
            }
        });
        test('handles various code values', async () => {
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            const testCases = ['ERROR_1', 'SUCCESS', 'WARN_XYZ', '123'];
            for (const code of testCases) {
                await host.notify({
                    time: new Date(),
                    level: 'info',
                    action: 'synth',
                    code,
                    message: `message with code ${code}`,
                    forceStdout: true,
                });
                expect(mockStdout).toHaveBeenCalledWith(chalk.white(`message with code ${code}`) + '\n');
            }
        });
    });
    describe('error handling', () => {
        test('rejects on write error', async () => {
            jest.spyOn(process.stdout, 'write').mockImplementation((_, callback) => {
                if (callback)
                    callback(new Error('Write failed'));
                return true;
            });
            const host = new cli_io_host_1.CliIoHost({ useTTY: true });
            await expect(host.notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'TEST',
                message: 'test message',
                forceStdout: true,
            })).rejects.toThrow('Write failed');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLWlvLWhvc3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsaS1pby1ob3N0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsK0RBQThFO0FBRTlFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ3pCLElBQUksVUFBcUIsQ0FBQztJQUMxQixJQUFJLFVBQXFCLENBQUM7SUFFMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkIsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUV2QixnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBUSxFQUFFLFFBQWMsRUFBRSxFQUFRLEVBQUUsRUFBRTtZQUM1RixVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDM0Isa0JBQWtCO1lBQ2xCLE1BQU0sUUFBUSxHQUFHLE9BQU8sUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDaEUsSUFBSSxRQUFRO2dCQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFRLEVBQUUsUUFBYyxFQUFFLEVBQVEsRUFBRSxFQUFFO1lBQzVGLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMzQixrQkFBa0I7WUFDbEIsTUFBTSxRQUFRLEdBQUcsT0FBTyxRQUFRLEtBQUssVUFBVSxDQUFDLENBQUMs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RSxNQUFNO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCB7IENsaUlvSG9zdCwgSW9BY3Rpb24sIHN0eWxlTWFwIH0gZnJvbSAnLi4vLi4vbGliL3Rvb2xraXQvY2xpLWlvLWhvc3QnO1xuXG5kZXNjcmliZSgnQ2xpSW9Ib3N0JywgKCkgPT4ge1xuICBsZXQgbW9ja1N0ZG91dDogamVzdC5Nb2NrO1xuICBsZXQgbW9ja1N0ZGVycjogamVzdC5Nb2NrO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tTdGRvdXQgPSBqZXN0LmZuKCk7XG4gICAgbW9ja1N0ZGVyciA9IGplc3QuZm4oKTtcblxuICAgIC8vIE1vY2sgdGhlIHdyaXRlIG1ldGhvZHMgb2YgU1REIG91dCBhbmQgU1REIGVyclxuICAgIGplc3Quc3B5T24ocHJvY2Vzcy5zdGRvdXQsICd3cml0ZScpLm1vY2tJbXBsZW1lbnRhdGlvbigoc3RyOiBhbnksIGVuY29kaW5nPzogYW55LCBjYj86IGFueSkgPT4ge1xuICAgICAgbW9ja1N0ZG91dChzdHIudG9TdHJpbmcoKSk7XG4gICAgICAvLyBIYW5kbGUgY2FsbGJhY2tcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gdHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nID8gZW5jb2RpbmcgOiBjYjtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgamVzdC5zcHlPbihwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJykubW9ja0ltcGxlbWVudGF0aW9uKChzdHI6IGFueSwgZW5jb2Rpbmc/OiBhbnksIGNiPzogYW55KSA9PiB7XG4gICAgICBtb2NrU3RkZXJyKHN0ci50b1N0cmluZygpKTtcbiAgICAgIC8vIEhhbmRsZSBjYWxsYmFja1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSB0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicgPyBlbmNvZGluZyA6IGNiO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N0cmVhbSBzZWxlY3Rpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnd3JpdGVzIHRvIHN0ZGVyciBieSBkZWZhdWx0IGZvciBub24tZXJyb3IgbWVzc2FnZXMgaW4gbm9uLUNJIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSB9KTtcbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICd0ZXN0IG1lc3NhZ2UnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsay53aGl0ZSgndGVzdCBtZXNzYWdlJykgKyAnXFxuJyk7XG4gICAgICBleHBlY3QobW9ja1N0ZG91dCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3dyaXRlcyB0byBzdGRlcnIgZm9yIGVycm9yIGxldmVsIHdpdGggcmVkIGNvbG9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ2Vycm9yIG1lc3NhZ2UnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsay5yZWQoJ2Vycm9yIG1lc3NhZ2UnKSArICdcXG4nKTtcbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd3JpdGVzIHRvIHN0ZG91dCB3aGVuIGZvcmNlU3Rkb3V0IGlzIHRydWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSB9KTtcbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICdmb3JjZWQgbWVzc2FnZScsXG4gICAgICAgIGZvcmNlU3Rkb3V0OiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsay53aGl0ZSgnZm9yY2VkIG1lc3NhZ2UnKSArICdcXG4nKTtcbiAgICAgIGV4cGVjdChtb2NrU3RkZXJyKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVFRZIGZvcm1hdHRpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnYWNjZXB0cyBpbmxpbmVkIGNoYWxrIHN0eWxlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvc3QgPSBuZXcgQ2xpSW9Ib3N0KHsgdXNlVFRZOiB0cnVlIH0pO1xuICAgICAgYXdhaXQgaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogY2hhbGsuZ3JlZW4oJ1tncmVlbiBwcmVmaXggbWVzc2FnZV0nKSArICcgcmVndWxhciBpbmZvIGxldmVsIHRleHQnLFxuICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBleHBlY3RlZF90ZXh0ID0gc3R5bGVNYXAuaW5mbyhjaGFsay5ncmVlbignW2dyZWVuIHByZWZpeCBtZXNzYWdlXScpICsgJyByZWd1bGFyIGluZm8gbGV2ZWwgdGV4dCcpO1xuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdGVkX3RleHQgKyAnXFxuJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhcHBsaWVzIGN1c3RvbSBzdHlsZSBpbiBUVFkgbW9kZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvc3QgPSBuZXcgQ2xpSW9Ib3N0KHsgdXNlVFRZOiB0cnVlIH0pO1xuICAgICAgY29uc3QgY3VzdG9tU3R5bGUgPSAoc3RyOiBzdHJpbmcpID0+IGBcXHgxYlszNW0ke3N0cn1cXHgxYlswbWA7IC8vIEN1c3RvbSBwdXJwbGUgY29sb3JcblxuICAgICAgYXdhaXQgaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogY3VzdG9tU3R5bGUoJ3N0eWxlZCBtZXNzYWdlJyksXG4gICAgICAgIGZvcmNlU3Rkb3V0OiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkX3RleHQgPSBzdHlsZU1hcC5pbmZvKGN1c3RvbVN0eWxlKCdzdHlsZWQgbWVzc2FnZScpKTtcbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3RlZF90ZXh0ICsgJ1xcbicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnYXBwbGllcyBkZWZhdWx0IHN0eWxlIGJ5IG1lc3NhZ2UgbGV2ZWwgaW4gVFRZIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSB9KTtcbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgbGV2ZWw6ICd3YXJuJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICd3YXJuaW5nIG1lc3NhZ2UnLFxuICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1N0ZG91dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2hhbGsueWVsbG93KCd3YXJuaW5nIG1lc3NhZ2UnKSArICdcXG4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RvZXMgbm90IGFwcGx5IHN0eWxlcyBpbiBub24tVFRZIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogZmFsc2UgfSk7XG4gICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgIGxldmVsOiAnaW5mbycsXG4gICAgICAgIGFjdGlvbjogJ3N5bnRoJyxcbiAgICAgICAgY29kZTogJ1RFU1QnLFxuICAgICAgICBtZXNzYWdlOiAndW5zdHlsZWQgbWVzc2FnZScsXG4gICAgICAgIGZvcmNlU3Rkb3V0OiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndW5zdHlsZWQgbWVzc2FnZVxcbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndGltZXN0YW1wIGhhbmRsaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ2luY2x1ZGVzIHRpbWVzdGFtcCBmb3IgREVCVUcgbGV2ZWwgd2l0aCBncmF5IGNvbG9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBjb25zdCB0ZXN0RGF0ZSA9IG5ldyBEYXRlKCcyMDI0LTAxLTAxVDEyOjM0OjU2Jyk7XG5cbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogdGVzdERhdGUsXG4gICAgICAgIGxldmVsOiAnZGVidWcnLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ2RlYnVnIG1lc3NhZ2UnLFxuICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1N0ZG91dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYFsxMjozNDo1Nl0gJHtjaGFsay5ncmF5KCdkZWJ1ZyBtZXNzYWdlJyl9XFxuYCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdpbmNsdWRlcyB0aW1lc3RhbXAgZm9yIFRSQUNFIGxldmVsIHdpdGggZ3JheSBjb2xvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvc3QgPSBuZXcgQ2xpSW9Ib3N0KHsgdXNlVFRZOiB0cnVlIH0pO1xuICAgICAgY29uc3QgdGVzdERhdGUgPSBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQxMjozNDo1NicpO1xuXG4gICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgIHRpbWU6IHRlc3REYXRlLFxuICAgICAgICBsZXZlbDogJ3RyYWNlJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICd0cmFjZSBtZXNzYWdlJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGBbMTI6MzQ6NTZdICR7Y2hhbGsuZ3JheSgndHJhY2UgbWVzc2FnZScpfVxcbmApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZXhjbHVkZXMgdGltZXN0YW1wIGZvciBvdGhlciBsZXZlbHMgYnV0IGluY2x1ZGVzIGNvbG9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBjb25zdCB0ZXN0RGF0ZSA9IG5ldyBEYXRlKCcyMDI0LTAxLTAxVDEyOjM0OjU2Jyk7XG5cbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogdGVzdERhdGUsXG4gICAgICAgIGxldmVsOiAnaW5mbycsXG4gICAgICAgIGFjdGlvbjogJ3N5bnRoJyxcbiAgICAgICAgY29kZTogJ1RFU1QnLFxuICAgICAgICBtZXNzYWdlOiAnaW5mbyBtZXNzYWdlJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKCdpbmZvIG1lc3NhZ2UnKSArICdcXG4nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NJIG1vZGUgYmVoYXZpb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnd3JpdGVzIHRvIHN0ZG91dCBpbiBDSSBtb2RlIHdoZW4gbGV2ZWwgaXMgbm90IGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUsIGNpOiB0cnVlIH0pO1xuICAgICAgYXdhaXQgaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ2NpIG1lc3NhZ2UnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsay53aGl0ZSgnY2kgbWVzc2FnZScpICsgJ1xcbicpO1xuICAgICAgZXhwZWN0KG1vY2tTdGRlcnIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3cml0ZXMgdG8gc3Rkb3V0IGluIENJIG1vZGUgd2l0aCBmb3JjZVN0ZG91dCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvc3QgPSBuZXcgQ2xpSW9Ib3N0KHsgdXNlVFRZOiB0cnVlLCBjaTogdHJ1ZSB9KTtcbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICdjaSBtZXNzYWdlJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKCdjaSBtZXNzYWdlJykgKyAnXFxuJyk7XG4gICAgICBleHBlY3QobW9ja1N0ZGVycikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3dyaXRlcyB0byBzdGRlcnIgZm9yIGVycm9yIGxldmVsIGluIENJIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSwgY2k6IHRydWUgfSk7XG4gICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ2NpIGVycm9yIG1lc3NhZ2UnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsay5yZWQoJ2NpIGVycm9yIG1lc3NhZ2UnKSArICdcXG4nKTtcbiAgICAgIGV4cGVjdChtb2NrU3Rkb3V0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd3JpdGVzIHRvIHN0ZG91dCBmb3IgZXJyb3IgbGV2ZWwgaW4gQ0kgbW9kZSB3aXRoIGZvcmNlU3RkT3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUsIGNpOiB0cnVlIH0pO1xuICAgICAgYXdhaXQgaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICdjaSBlcnJvciBtZXNzYWdlJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLnJlZCgnY2kgZXJyb3IgbWVzc2FnZScpICsgJ1xcbicpO1xuICAgICAgZXhwZWN0KG1vY2tTdGRlcnIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzcGVjaWFsIGNoYXJhY3RlcnMgaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnaGFuZGxlcyBtZXNzYWdlcyB3aXRoIEFOU0kgZXNjYXBlIHNlcXVlbmNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvc3QgPSBuZXcgQ2xpSW9Ib3N0KHsgdXNlVFRZOiB0cnVlIH0pO1xuICAgICAgYXdhaXQgaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ1xcdTAwMWJbMzFtcmVkIHRleHRcXHUwMDFiWzBtJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKCdcXHUwMDFiWzMxbXJlZCB0ZXh0XFx1MDAxYlswbScpICsgJ1xcbicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaGFuZGxlcyBtZXNzYWdlcyB3aXRoIG5ld2xpbmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgIGxldmVsOiAnaW5mbycsXG4gICAgICAgIGFjdGlvbjogJ3N5bnRoJyxcbiAgICAgICAgY29kZTogJ1RFU1QnLFxuICAgICAgICBtZXNzYWdlOiAnbGluZTFcXG5saW5lMlxcbmxpbmUzJyxcbiAgICAgICAgZm9yY2VTdGRvdXQ6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKCdsaW5lMVxcbmxpbmUyXFxubGluZTMnKSArICdcXG4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2hhbmRsZXMgZW1wdHkgbWVzc2FnZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSB9KTtcbiAgICAgIGF3YWl0IGhvc3Qubm90aWZ5KHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgYWN0aW9uOiAnc3ludGgnLFxuICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1N0ZG91dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2hhbGsud2hpdGUoJycpICsgJ1xcbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYWN0aW9uIGFuZCBjb2RlIGJlaGF2aW9yJywgKCkgPT4ge1xuICAgIHRlc3QoJ2hhbmRsZXMgYWxsIHBvc3NpYmxlIGFjdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBob3N0ID0gbmV3IENsaUlvSG9zdCh7IHVzZVRUWTogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IGFjdGlvbnM6IElvQWN0aW9uW10gPSBbJ3N5bnRoJywgJ2xpc3QnLCAnZGVwbG95JywgJ2Rlc3Ryb3knXTtcblxuICAgICAgZm9yIChjb25zdCBhY3Rpb24gb2YgYWN0aW9ucykge1xuICAgICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBjb2RlOiAnVEVTVCcsXG4gICAgICAgICAgbWVzc2FnZTogYCR7YWN0aW9ufSBtZXNzYWdlYCxcbiAgICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKGAke2FjdGlvbn0gbWVzc2FnZWApICsgJ1xcbicpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdCgnaGFuZGxlcyB2YXJpb3VzIGNvZGUgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBjb25zdCB0ZXN0Q2FzZXMgPSBbJ0VSUk9SXzEnLCAnU1VDQ0VTUycsICdXQVJOX1hZWicsICcxMjMnXTtcblxuICAgICAgZm9yIChjb25zdCBjb2RlIG9mIHRlc3RDYXNlcykge1xuICAgICAgICBhd2FpdCBob3N0Lm5vdGlmeSh7XG4gICAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICAgIGFjdGlvbjogJ3N5bnRoJyxcbiAgICAgICAgICBjb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IGBtZXNzYWdlIHdpdGggY29kZSAke2NvZGV9YCxcbiAgICAgICAgICBmb3JjZVN0ZG91dDogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tTdGRvdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxrLndoaXRlKGBtZXNzYWdlIHdpdGggY29kZSAke2NvZGV9YCkgKyAnXFxuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlcnJvciBoYW5kbGluZycsICgpID0+IHtcbiAgICB0ZXN0KCdyZWplY3RzIG9uIHdyaXRlIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihwcm9jZXNzLnN0ZG91dCwgJ3dyaXRlJykubW9ja0ltcGxlbWVudGF0aW9uKChfOiBhbnksIGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhuZXcgRXJyb3IoJ1dyaXRlIGZhaWxlZCcpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaG9zdCA9IG5ldyBDbGlJb0hvc3QoeyB1c2VUVFk6IHRydWUgfSk7XG4gICAgICBhd2FpdCBleHBlY3QoaG9zdC5ub3RpZnkoe1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICBhY3Rpb246ICdzeW50aCcsXG4gICAgICAgIGNvZGU6ICdURVNUJyxcbiAgICAgICAgbWVzc2FnZTogJ3Rlc3QgbWVzc2FnZScsXG4gICAgICAgIGZvcmNlU3Rkb3V0OiB0cnVlLFxuICAgICAgfSkpLnJlamVjdHMudG9UaHJvdygnV3JpdGUgZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=