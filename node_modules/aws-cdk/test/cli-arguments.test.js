"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const convert_to_cli_args_1 = require("../lib/convert-to-cli-args");
const parse_command_line_arguments_1 = require("../lib/parse-command-line-arguments");
test('yargs object can be converted to cli arguments', async () => {
    const input = await (0, parse_command_line_arguments_1.parseCommandLineArguments)(['deploy', '-R', '-v', '--ci']);
    const result = (0, convert_to_cli_args_1.convertToCliArgs)(input);
    expect(result).toEqual({
        _: ['deploy'],
        globalOptions: {
            app: undefined,
            assetMetadata: undefined,
            build: undefined,
            caBundlePath: undefined,
            context: [],
            ignoreErrors: false,
            noColor: false,
            pathMetadata: undefined,
            plugin: [],
            profile: undefined,
            proxy: undefined,
            roleArn: undefined,
            staging: true,
            strict: undefined,
            verbose: 1,
            versionReporting: undefined,
            ci: true,
            debug: false,
            ec2creds: undefined,
            json: false,
            lookups: true,
            trace: undefined,
            unstable: [],
            notices: undefined,
            output: undefined,
        },
        deploy: {
            all: false,
            assetParallelism: undefined,
            assetPrebuild: true,
            buildExclude: [],
            changeSetName: undefined,
            concurrency: 1,
            execute: undefined,
            exclusively: undefined,
            force: false,
            hotswap: undefined,
            hotswapFallback: undefined,
            ignoreNoStacks: false,
            importExistingResources: false,
            logs: true,
            method: undefined,
            notificationArns: undefined,
            outputsFile: undefined,
            parameters: [{}],
            previousParameters: true,
            progress: undefined,
            requireApproval: undefined,
            rollback: false,
            tags: [],
            toolkitStackName: undefined,
            watch: undefined,
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLWFyZ3VtZW50cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLWFyZ3VtZW50cy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0VBQThEO0FBQzlELHNGQUFnRjtBQUVoRixJQUFJLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDaEUsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLHdEQUF5QixFQUFDLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUU5RSxNQUFNLE1BQU0sR0FBRyxJQUFBLHNDQUFnQixFQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDckIsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQ2IsYUFBYSxFQUFFO1lBQ2IsR0FBRyxFQUFFLFNBQVM7WUFDZCxhQUFhLEVBQUUsU0FBUztZQUN4QixLQUFLLEVBQUUsU0FBUztZQUNoQixZQUFZLEVBQUUsU0FBUztZQUN2QixPQUFPLEVBQUUsRUFBRTtZQUNYLFlBQVksRUFBRSxLQUFLO1lBQ25CLE9BQU8sRUFBRSxLQUFLO1lBQ2QsWUFBWSxFQUFFLFNBQVM7WUFDdkIsTUFBTSxFQUFFLEVBQUU7WUFDVixPQUFPLEVBQUUsU0FBUztZQUNsQixLQUFLLEVBQUUsU0FBUztZQUNoQixPQUFPLEVBQUUsU0FBUztZQUNsQixPQUFPLEVBQUUsSUFBSTtZQUNiLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE9BQU8sRUFBRSxDQUFDO1lBQ1YsZ0JBQWdCLEVBQUUsU0FBUztZQUMzQixFQUFFLEVBQUUsSUFBSTtZQUNSLEtBQUssRUFBRSxLQUFLO1lBQ1osUUFBUSxFQUFFLFNBQVM7WUFDbkIsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsSUFBSTtZQUNiLEtBQUssRUFBRSxTQUFTO1lBQ2hCLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLFNBQVM7WUFDbEIsTUFBTSxFQUFFLFNBQVM7U0FDbEI7UUFDRCxNQUFNLEVBQUU7WUFDTixHQUFHLEVBQUUsS0FBSztZQUNWLGdCQUFnQixFQUFFLFNBQVM7WUFDM0IsYUFBYSxFQUFFLElBQUk7WUFDbkIsWUFBWSxFQUFFLEVBQUU7WUFDaEIsYUFBYSxFQUFFLFNBQVM7WUFDeEIsV0FBVyxFQUFFLENBQUM7WUFDZCxPQUFPLEVBQUUsU0FBUztZQUNsQixXQUFXLEVBQUUsU0FBUztZQUN0QixLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGVBQWUsRUFBRSxTQUFTO1lBQzFCLGNBQWMsRUFBRSxLQUFLO1lBQ3JCLHVCQUF1QixFQUFFLEtBQUs7WUFDOUIsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsU0FBUztZQUNqQixnQkFBZ0IsRUFBRSxTQUFTO1lBQzNCLFdBQVcsRUFBRSxTQUFTO1lBQ3RCLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNoQixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGVBQWUsRUFBRSxTQUFTO1lBQzFCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLEVBQUU7WUFDUixnQkFBZ0IsRUFBRSxTQUFTO1lBQzNCLEtBQUssRUFBRSxTQUFTO1NBQ2pCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VG9DbGlBcmdzIH0gZnJvbSAnLi4vbGliL2NvbnZlcnQtdG8tY2xpLWFyZ3MnO1xuaW1wb3J0IHsgcGFyc2VDb21tYW5kTGluZUFyZ3VtZW50cyB9IGZyb20gJy4uL2xpYi9wYXJzZS1jb21tYW5kLWxpbmUtYXJndW1lbnRzJztcblxudGVzdCgneWFyZ3Mgb2JqZWN0IGNhbiBiZSBjb252ZXJ0ZWQgdG8gY2xpIGFyZ3VtZW50cycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgaW5wdXQgPSBhd2FpdCBwYXJzZUNvbW1hbmRMaW5lQXJndW1lbnRzKFsnZGVwbG95JywgJy1SJywgJy12JywgJy0tY2knXSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gY29udmVydFRvQ2xpQXJncyhpbnB1dCk7XG5cbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgXzogWydkZXBsb3knXSxcbiAgICBnbG9iYWxPcHRpb25zOiB7XG4gICAgICBhcHA6IHVuZGVmaW5lZCxcbiAgICAgIGFzc2V0TWV0YWRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGJ1aWxkOiB1bmRlZmluZWQsXG4gICAgICBjYUJ1bmRsZVBhdGg6IHVuZGVmaW5lZCxcbiAgICAgIGNvbnRleHQ6IFtdLFxuICAgICAgaWdub3JlRXJyb3JzOiBmYWxzZSxcbiAgICAgIG5vQ29sb3I6IGZhbHNlLFxuICAgICAgcGF0aE1ldGFkYXRhOiB1bmRlZmluZWQsXG4gICAgICBwbHVnaW46IFtdLFxuICAgICAgcHJvZmlsZTogdW5kZWZpbmVkLFxuICAgICAgcHJveHk6IHVuZGVmaW5lZCxcbiAgICAgIHJvbGVBcm46IHVuZGVmaW5lZCxcbiAgICAgIHN0YWdpbmc6IHRydWUsXG4gICAgICBzdHJpY3Q6IHVuZGVmaW5lZCxcbiAgICAgIHZlcmJvc2U6IDEsXG4gICAgICB2ZXJzaW9uUmVwb3J0aW5nOiB1bmRlZmluZWQsXG4gICAgICBjaTogdHJ1ZSxcbiAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgIGVjMmNyZWRzOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiBmYWxzZSxcbiAgICAgIGxvb2t1cHM6IHRydWUsXG4gICAgICB0cmFjZTogdW5kZWZpbmVkLFxuICAgICAgdW5zdGFibGU6IFtdLFxuICAgICAgbm90aWNlczogdW5kZWZpbmVkLFxuICAgICAgb3V0cHV0OiB1bmRlZmluZWQsXG4gICAgfSxcbiAgICBkZXBsb3k6IHtcbiAgICAgIGFsbDogZmFsc2UsXG4gICAgICBhc3NldFBhcmFsbGVsaXNtOiB1bmRlZmluZWQsXG4gICAgICBhc3NldFByZWJ1aWxkOiB0cnVlLFxuICAgICAgYnVpbGRFeGNsdWRlOiBbXSxcbiAgICAgIGNoYW5nZVNldE5hbWU6IHVuZGVmaW5lZCxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgZXhlY3V0ZTogdW5kZWZpbmVkLFxuICAgICAgZXhjbHVzaXZlbHk6IHVuZGVmaW5lZCxcbiAgICAgIGZvcmNlOiBmYWxzZSxcbiAgICAgIGhvdHN3YXA6IHVuZGVmaW5lZCxcbiAgICAgIGhvdHN3YXBGYWxsYmFjazogdW5kZWZpbmVkLFxuICAgICAgaWdub3JlTm9TdGFja3M6IGZhbHNlLFxuICAgICAgaW1wb3J0RXhpc3RpbmdSZXNvdXJjZXM6IGZhbHNlLFxuICAgICAgbG9nczogdHJ1ZSxcbiAgICAgIG1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgbm90aWZpY2F0aW9uQXJuczogdW5kZWZpbmVkLFxuICAgICAgb3V0cHV0c0ZpbGU6IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtZXRlcnM6IFt7fV0sXG4gICAgICBwcmV2aW91c1BhcmFtZXRlcnM6IHRydWUsXG4gICAgICBwcm9ncmVzczogdW5kZWZpbmVkLFxuICAgICAgcmVxdWlyZUFwcHJvdmFsOiB1bmRlZmluZWQsXG4gICAgICByb2xsYmFjazogZmFsc2UsXG4gICAgICB0YWdzOiBbXSxcbiAgICAgIHRvb2xraXRTdGFja05hbWU6IHVuZGVmaW5lZCxcbiAgICAgIHdhdGNoOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==