"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSleep = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
class TimeSleep extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const handler = new aws_lambda_1.SingletonFunction(this, 'CustomResourceHandler', {
            // Use raw string to avoid from tightening CDK version requirement
            runtime: new aws_lambda_1.Runtime('nodejs18.x', aws_lambda_1.RuntimeFamily.NODEJS, { supportsInlineCode: true }),
            code: aws_lambda_1.Code.fromInline(fs_1.readFileSync(path_1.join(__dirname, '../', 'lambda', 'dist', 'index.js')).toString()),
            handler: 'index.handler',
            uuid: '494c1b46-0d2f-4e3b-9bfd-0b2cf10162f9',
            lambdaPurpose: 'TimeSleepCustomResourceHandler',
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            memorySize: 128,
        });
        const properties = {
            createDurationSeconds: props.createDuration?.toSeconds() ?? 0,
            destroyDurationSeconds: props.destroyDuration?.toSeconds() ?? 0,
        };
        new aws_cdk_lib_1.CustomResource(this, 'Default', {
            serviceToken: handler.functionArn,
            resourceType: 'Custom::TimeSleep',
            properties,
        });
    }
}
exports.TimeSleep = TimeSleep;
_a = JSII_RTTI_SYMBOL_1;
TimeSleep[_a] = { fqn: "cdk-time-sleep.TimeSleep", version: "0.0.5" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1zbGVlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90aW1lLXNsZWVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkJBQWtDO0FBQ2xDLCtCQUE0QjtBQUM1Qiw2Q0FBdUQ7QUFDdkQsdURBQXlGO0FBQ3pGLDJDQUF1QztBQXFCdkMsTUFBYSxTQUFVLFNBQVEsc0JBQVM7SUFDdEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFxQjtRQUM3RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sT0FBTyxHQUFHLElBQUksOEJBQWlCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQ25FLGtFQUFrRTtZQUNsRSxPQUFPLEVBQUUsSUFBSSxvQkFBTyxDQUFDLFlBQVksRUFBRSwwQkFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ3RGLElBQUksRUFBRSxpQkFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBWSxDQUFDLFdBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwRyxPQUFPLEVBQUUsZUFBZTtZQUN4QixJQUFJLEVBQUUsc0NBQXNDO1lBQzVDLGFBQWEsRUFBRSxnQ0FBZ0M7WUFDL0MsT0FBTyxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM3QixVQUFVLEVBQUUsR0FBRztTQUNoQixDQUFDLENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBdUI7WUFDckMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDO1lBQzdELHNCQUFzQixFQUFFLEtBQUssQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztTQUNoRSxDQUFDO1FBRUYsSUFBSSw0QkFBYyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDbEMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQ2pDLFlBQVksRUFBRSxtQkFBbUI7WUFDakMsVUFBVTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBekJILDhCQTBCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvZGUsIFJ1bnRpbWUsIFJ1bnRpbWVGYW1pbHksIFNpbmdsZXRvbkZ1bmN0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IFJlc291cmNlUHJvcGVydGllcyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVTbGVlcFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiB0byBzbGVlcCB3aGVuIHRoaXMgcmVzb3VyY2UgaXMgY3JlYXRlZC5cbiAgICogQ3VycmVudGx5IGl0IGlzIGxpbWl0ZWQgdXAgdG8gMTUgbWlucy5cbiAgICpcbiAgICogQGRlZmF1bHQgbm8gc2xlZXAgKDAgc2Vjb25kcylcbiAgICovXG4gIHJlYWRvbmx5IGNyZWF0ZUR1cmF0aW9uPzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiB0byBzbGVlcCB3aGVuIHRoaXMgcmVzb3VyY2UgaXMgZGVsZXRlZC5cbiAgICogQ3VycmVudGx5IGl0IGlzIGxpbWl0ZWQgdXAgdG8gMTUgbWlucy5cbiAgICpcbiAgICogQGRlZmF1bHQgbm8gc2xlZXAgKDAgc2Vjb25kcylcbiAgICovXG4gIHJlYWRvbmx5IGRlc3Ryb3lEdXJhdGlvbj86IER1cmF0aW9uO1xufVxuXG5leHBvcnQgY2xhc3MgVGltZVNsZWVwIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRpbWVTbGVlcFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgU2luZ2xldG9uRnVuY3Rpb24odGhpcywgJ0N1c3RvbVJlc291cmNlSGFuZGxlcicsIHtcbiAgICAgIC8vIFVzZSByYXcgc3RyaW5nIHRvIGF2b2lkIGZyb20gdGlnaHRlbmluZyBDREsgdmVyc2lvbiByZXF1aXJlbWVudFxuICAgICAgcnVudGltZTogbmV3IFJ1bnRpbWUoJ25vZGVqczE4LngnLCBSdW50aW1lRmFtaWx5Lk5PREVKUywgeyBzdXBwb3J0c0lubGluZUNvZGU6IHRydWUgfSksXG4gICAgICBjb2RlOiBDb2RlLmZyb21JbmxpbmUocmVhZEZpbGVTeW5jKGpvaW4oX19kaXJuYW1lLCAnLi4vJywgJ2xhbWJkYScsICdkaXN0JywgJ2luZGV4LmpzJykpLnRvU3RyaW5nKCkpLFxuICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgdXVpZDogJzQ5NGMxYjQ2LTBkMmYtNGUzYi05YmZkLTBiMmNmMTAxNjJmOScsIC8vIGdlbmVyYXRlZCBmb3IgdGhpcyBjb25zdHJ1Y3RcbiAgICAgIGxhbWJkYVB1cnBvc2U6ICdUaW1lU2xlZXBDdXN0b21SZXNvdXJjZUhhbmRsZXInLFxuICAgICAgdGltZW91dDogRHVyYXRpb24ubWludXRlcygxNSksXG4gICAgICBtZW1vcnlTaXplOiAxMjgsXG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9wZXJ0aWVzOiBSZXNvdXJjZVByb3BlcnRpZXMgPSB7XG4gICAgICBjcmVhdGVEdXJhdGlvblNlY29uZHM6IHByb3BzLmNyZWF0ZUR1cmF0aW9uPy50b1NlY29uZHMoKSA/PyAwLFxuICAgICAgZGVzdHJveUR1cmF0aW9uU2Vjb25kczogcHJvcHMuZGVzdHJveUR1cmF0aW9uPy50b1NlY29uZHMoKSA/PyAwLFxuICAgIH07XG5cbiAgICBuZXcgQ3VzdG9tUmVzb3VyY2UodGhpcywgJ0RlZmF1bHQnLCB7XG4gICAgICBzZXJ2aWNlVG9rZW46IGhhbmRsZXIuZnVuY3Rpb25Bcm4sXG4gICAgICByZXNvdXJjZVR5cGU6ICdDdXN0b206OlRpbWVTbGVlcCcsXG4gICAgICBwcm9wZXJ0aWVzLFxuICAgIH0pO1xuICB9XG59XG4iXX0=